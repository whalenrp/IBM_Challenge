import sys
from AbstractLearner import AbstractLearner
from random import Random

class RandomForestLearner(AbstractLearner):
	"""
	Derived class implementation of AbstractLearner. This class implements the learn() 
	and classify() functions using a Random Forest
	"""

	def __init__(self, trainingInputFile, testInputFile, isMachineReadable, outputFile):
		AbstractLearner.__init__(self, trainingInputFile, testInputFile, 
			isMachineReadable, outputFile)
		self.randForest = list()

	def learn(self):
		"""
		Creates a classification model based on data held in the AbstractLearner's 
		trainingData list-of-lists
		"""

		del self.randForest[:] # Empty the list of previous contents
		randomGen = Random()
		numRows = len(self.trainingData)
		for _ in range(numRows): # The number of random trees in forest
			data = list()
			for _ in range(numRows): # Generate the random tree itself
				randomNum = randomGen.randrange(numRows)
				data.append(self.trainingData[randomNum])
			self.randForest.append(self.makeTree(data))
		

	def classify(self):
		"""
		Based on the classification model generated by learn(), this function will read from
		the testData list-of-lists in AbstractLearner and output the prediction for each 
		variable
		"""
		print "Function not yet Defined"
		sys.exit(0)
		
	def makeTree(self, data):
		"""
		Returns a tree created from the given data.
		"""
		
		# transpose and sort data
		sortedColumns = [sorted(list(a)) for a in zip(*data)]
		
			
		print "Function not yet Defined"
		sys.exit(0)
